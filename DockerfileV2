FROM python:3.11-slim
LABEL authors="Logan Ruf"

# Set working directory
WORKDIR /app

# Install system dependencies and cleanup in a single layer to reduce image size
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    # Chrome dependencies
    libX11 libX11-devel libxcb libxcb-devel \
    atk atk-devel at-spi2-atk at-spi2-atk-devel \
    cups-libs libdrm libdbus xkbcommon at-spi2-core \
    libXcomposite libXdamage libXext libXfixes libXrandr mesa-libgbm \
    pango pango-devel cairo cairo-devel alsa-lib libxkbcommon
   
RUN apt-get clean
#    libx11-6 \
#    libx11-dev \
#    libxcb1 \
#    libxcb1-dev \
#    libatk1.0-0 \
#    libatk1.0-dev \
#    libatspi2.0-0 \
#    libatspi2.0-dev \
#    libcups2 \
#    libdrm2 \
#    libdbus-1-3 \
#    libxkbcommon0 \
#    libxcomposite1 \
#    libxdamage1 \
#    libxext6 \
#    libxfixes3 \
#    libxrandr2 \
#    libgbm1 \
#    libpango-1.0-0 \
#    libpango1.0-dev \
#    libcairo2 \
#    libcairo2-dev \
#    libasound2 \
#    libxkbcommon0 \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*

# Download and install Chrome
RUN wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chrome-linux64.zip \
    && unzip chrome-linux64.zip -d /app \
    && chmod +rx /app/chrome-linux64/* \
    && rm chrome-linux64.zip

# Download and install ChromeDriver
RUN wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chromedriver-linux64.zip \
    && unzip chromedriver-linux64.zip -d /app \
    && chmod +rx /app/chromedriver-linux64/* \
    && rm chromedriver-linux64.zip

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install -r requirements.txt

# Install Segment library fork
RUN wget https://github.com/Logan-Ruf/analytics-python/archive/refs/heads/master.zip \
    && unzip master.zip -d /tmp \
    && cp -r /tmp/analytics-python-master/segment /app \
    && rm master.zip \
    && rm -rf /tmp/analytics-python-master

# Set environment variables for Azure Container Apps
ENV PORT=8080
ENV WEBSITES_PORT=8080

# Create a non-root user and switch to it
RUN useradd -m -s /bin/bash appuser \
    && chown -R appuser:appuser /app
USER appuser

# Expose the port the app runs on
EXPOSE 8080

# Copy application code
COPY webdriver_client.py .
COPY scraper.py .
COPY parser.py .
COPY tasks.py .
COPY invalid_file_handler.py .
COPY models.py .
COPY main.py .

# Command to run the application
CMD ["python", "main.py"]

